{
  "address": "0x944423F3b395B75B161E826e891b3BD9e7F5068f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l1TokenBridge_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientWstETHReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrapETHFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "l1Token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1TokenBridge",
      "outputs": [
        {
          "internalType": "contract IL1TokenBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "l2Gas_",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "stakeETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec2e420e69d7549df10de256251e2c301f79b7f903a1f4f26ddf8ad1ab605d95",
  "receipt": {
    "to": null,
    "from": "0xAf5B6AE540fCf3BD76f1b4C83fC87143932AAd09",
    "contractAddress": "0x944423F3b395B75B161E826e891b3BD9e7F5068f",
    "transactionIndex": 37,
    "gasUsed": "488952",
    "logsBloom": "0x
    "blockHash": "0xee93d5f2845533aff99673151a7946be632abfed0dac88484d625ac70decd3e8",
    "transactionHash": "0xec2e420e69d7549df10de256251e2c301f79b7f903a1f4f26ddf8ad1ab605d95",
    "logs": [],
    "blockNumber": 5522914,
    "cumulativeGasUsed": "6342686",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB82381A3fBD3FaFA77B3a7bE693342618240067b",
    "0x9b72b0D75e2eb87579694E842741738d3a9C311E",
    "0xCB4619437C5Bb35d26346DeA9FeB9bD73c4f2633"
  ],
  "numDeployments": 1,
  "solcInputHash": "ce069893e9f9d5099439824520d9f7b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1TokenBridge_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientWstETHReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrapETHFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1TokenBridge\",\"outputs\":[{\"internalType\":\"contract IL1TokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas_\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/manta/StakeHelper.sol\":\"StakeHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/manta/StakeHelper.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Lido <info@lido.fi>\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20Bridged} from \\\"../token/interfaces/IERC20Bridged.sol\\\";\\n\\n\\ninterface IL1TokenBridge {\\n    function depositERC20To(\\n        address l1Token_,\\n        address l2Token_,\\n        address to_,\\n        uint256 amount_,\\n        uint32 l2Gas_,\\n        bytes calldata data_\\n    ) external;\\n}\\n\\nerror ZeroAddress();\\n\\nerror WrapETHFailed();\\n\\nerror ZeroAmount();\\n\\nerror InsufficientWstETHReceived();\\n\\ncontract StakeHelper is ReentrancyGuard {\\n    IERC20 public immutable l1Token;\\n\\n    address public immutable l2Token;\\n\\n    IL1TokenBridge public immutable l1TokenBridge;\\n\\n    event Stake(address indexed staker, uint256 indexed amount);\\n\\n    constructor(\\n        address l1Token_, \\n        address l2Token_,\\n        address l1TokenBridge_\\n    ) {\\n        l1Token = IERC20(l1Token_);\\n        l2Token = l2Token_;\\n        l1TokenBridge = IL1TokenBridge(l1TokenBridge_);\\n    }\\n\\n    // Wrap sender's ETH to wstETH and bridge to L2\\n    function stakeETH(\\n        address to,\\n        uint32 l2Gas_,\\n        bytes calldata data_\\n    ) external payable nonReentrant {\\n        if (to == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        uint256 amount = msg.value;\\n        if (amount == 0) {\\n            revert ZeroAmount();\\n        }\\n        // wstETH on L1 will automatically wrap sent Ether in `receive` function\\n        (bool success, ) = address(l1Token).call{value: msg.value}(\\\"\\\");\\n        if (!success) {\\n            revert WrapETHFailed();\\n        }\\n        // double check amount\\n        if (l1Token.balanceOf(address(this)) < amount) {\\n            revert InsufficientWstETHReceived();\\n        }\\n        // now the wstETH is at this contract, bridge to L2 in behalf of the sender\\n        // 1. approve token bridge to use `l1Token` of this contract\\n        l1Token.approve(address(l1TokenBridge), amount);\\n        // 2. actual cross bridge transfer\\n        l1TokenBridge.depositERC20To(address(l1Token), l2Token, msg.sender, amount, l2Gas_, data_);\\n\\n        emit Stake(msg.sender, amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6972fa20c6152cb1f2d99e82f7452a6e8cb150c58b00ddf2cd511019c0f34a69\",\"license\":\"GPL-3.0\"},\"contracts/token/interfaces/IERC20Bridged.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Lido <info@lido.fi>\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @author psirex\\n/// @notice Extends the ERC20 functionality that allows the bridge to mint/burn tokens\\ninterface IERC20Bridged is IERC20 {\\n    /// @notice Returns bridge which can mint and burn tokens on L2\\n    function bridge() external view returns (address);\\n\\n    /// @notice Creates amount_ tokens and assigns them to account_, increasing the total supply\\n    /// @param account_ An address of the account to mint tokens\\n    /// @param amount_ An amount of tokens to mint\\n    function bridgeMint(address account_, uint256 amount_) external;\\n\\n    /// @notice Destroys amount_ tokens from account_, reducing the total supply\\n    /// @param account_ An address of the account to burn tokens\\n    /// @param amount_ An amount of tokens to burn\\n    function bridgeBurn(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xf530d522554422944e9ef5600209fa2cf85b64ae688323526eea4ae33e9de9ec\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161088d38038061088d83398101604081905261002f9161006d565b60016000556001600160a01b0392831660805290821660a0521660c0526100b0565b80516001600160a01b038116811461006857600080fd5b919050565b60008060006060848603121561008257600080fd5b61008b84610051565b925061009960208501610051565b91506100a760408501610051565b90509250925092565b60805160a05160c05161078061010d600039600081816056015281816103f801526104d201526000818160b3015261052101526000818160fc0152818161021d015281816103030152818161042701526104ff01526107806000f3fe60806040526004361061003f5760003560e01c806336c717c11461004457806356eff267146100a15780638fdb9202146100d5578063c01e1bd6146100ea575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100ad57600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6100e86100e33660046105bf565b61011e565b005b3480156100f657600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6002600054141561018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b600260005573ffffffffffffffffffffffffffffffffffffffff84166101e1576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480610219576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163460405160006040518083038185875af1925050503d8060008114610293576040519150601f19603f3d011682016040523d82523d6000602084013e610298565b606091505b50509050806102d3576040517fe83092ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015282907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610673565b10156103bb576040517fcdfc39de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015610470573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610494919061068c565b506040517f838b252000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063838b252090610553907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090339088908c908c908c906004016106b5565b600060405180830381600087803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b50506040518492503391507febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a90600090a35050600160005550505050565b600080600080606085870312156105d557600080fd5b843573ffffffffffffffffffffffffffffffffffffffff811681146105f957600080fd5b9350602085013563ffffffff8116811461061257600080fd5b9250604085013567ffffffffffffffff8082111561062f57600080fd5b818701915087601f83011261064357600080fd5b81358181111561065257600080fd5b88602082850101111561066457600080fd5b95989497505060200194505050565b60006020828403121561068557600080fd5b5051919050565b60006020828403121561069e57600080fd5b815180151581146106ae57600080fd5b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525085606083015263ffffffff8516608083015260c060a08301528260c0830152828460e0840137600060e0848401015260e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509897505050505050505056fea264697066735822122047d15268d50dbef14cae0af680a27eea742877bf5a2260f2a44a87162995250a64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806336c717c11461004457806356eff267146100a15780638fdb9202146100d5578063c01e1bd6146100ea575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100ad57600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6100e86100e33660046105bf565b61011e565b005b3480156100f657600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6002600054141561018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640160405180910390fd5b600260005573ffffffffffffffffffffffffffffffffffffffff84166101e1576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480610219576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163460405160006040518083038185875af1925050503d8060008114610293576040519150601f19603f3d011682016040523d82523d6000602084013e610298565b606091505b50509050806102d3576040517fe83092ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015282907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190610673565b10156103bb576040517fcdfc39de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015610470573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610494919061068c565b506040517f838b252000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063838b252090610553907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090339088908c908c908c906004016106b5565b600060405180830381600087803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b50506040518492503391507febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a90600090a35050600160005550505050565b600080600080606085870312156105d557600080fd5b843573ffffffffffffffffffffffffffffffffffffffff811681146105f957600080fd5b9350602085013563ffffffff8116811461061257600080fd5b9250604085013567ffffffffffffffff8082111561062f57600080fd5b818701915087601f83011261064357600080fd5b81358181111561065257600080fd5b88602082850101111561066457600080fd5b95989497505060200194505050565b60006020828403121561068557600080fd5b5051919050565b60006020828403121561069e57600080fd5b815180151581146106ae57600080fd5b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525085606083015263ffffffff8516608083015260c060a08301528260c0830152828460e0840137600060e0848401015260e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509897505050505050505056fea264697066735822122047d15268d50dbef14cae0af680a27eea742877bf5a2260f2a44a87162995250a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 846,
        "contract": "contracts/manta/StakeHelper.sol:StakeHelper",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}